// <auto-generated />
using System;
using DeliveryServiceApi.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DeliveryServiceApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230401091644_InitdataBase")]
    partial class InitdataBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("DeliveryServiceApi.Data.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("DeliveryServiceApi.Data.Models.CategoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("CategoryTypes");
                });

            modelBuilder.Entity("DeliveryServiceApi.Data.Models.Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("DeliveryServiceData.Data.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("CategoryId"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("CategotyTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryTypeId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DeliveryServiceData.Data.Models.Good", b =>
                {
                    b.Property<int>("GoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("GoodId"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("CategotyTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ClothesPatterns")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("CompleteSet")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FabricDensity")
                        .HasColumnType("text");

                    b.Property<string>("FabricСontent")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("GoodCode")
                        .HasColumnType("text");

                    b.Property<string>("Guarantee")
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Material")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<int?>("SalePersent")
                        .HasColumnType("integer");

                    b.Property<string>("Season")
                        .HasColumnType("text");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<int?>("SubcategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("GoodId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CategoryTypeId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("DeliveryServiceData.Data.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("DeliveryServiceData.Data.Models.Products.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Bytes")
                        .HasColumnType("bytea");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<int?>("GoodId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<decimal?>("Size")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("GoodId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("DeliveryServiceApi.Data.Models.CategoryType", b =>
                {
                    b.HasOne("DeliveryServiceData.Data.Models.ProductType", "ProductType")
                        .WithMany("CategoriesType")
                        .HasForeignKey("ProductTypeId");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("DeliveryServiceApi.Data.Models.Subcategory", b =>
                {
                    b.HasOne("DeliveryServiceData.Data.Models.Category", "Category")
                        .WithMany("Subcategorys")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DeliveryServiceData.Data.Models.Category", b =>
                {
                    b.HasOne("DeliveryServiceApi.Data.Models.Brand", "Brand")
                        .WithMany("Categories")
                        .HasForeignKey("BrandId");

                    b.HasOne("DeliveryServiceApi.Data.Models.CategoryType", "CategoryType")
                        .WithMany("Categories")
                        .HasForeignKey("CategoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("CategoryType");
                });

            modelBuilder.Entity("DeliveryServiceData.Data.Models.Good", b =>
                {
                    b.HasOne("DeliveryServiceApi.Data.Models.Brand", "Brand")
                        .WithMany("Goods")
                        .HasForeignKey("BrandId");

                    b.HasOne("DeliveryServiceData.Data.Models.Category", "Category")
                        .WithMany("Goods")
                        .HasForeignKey("CategoryId");

                    b.HasOne("DeliveryServiceApi.Data.Models.CategoryType", "CategoryType")
                        .WithMany("Goods")
                        .HasForeignKey("CategoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeliveryServiceApi.Data.Models.Subcategory", "Subcategory")
                        .WithMany("Goods")
                        .HasForeignKey("SubcategoryId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("CategoryType");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("DeliveryServiceData.Data.Models.Products.Photo", b =>
                {
                    b.HasOne("DeliveryServiceApi.Data.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("DeliveryServiceData.Data.Models.Good", "Good")
                        .WithMany("Photos")
                        .HasForeignKey("GoodId");

                    b.Navigation("Brand");

                    b.Navigation("Good");
                });

            modelBuilder.Entity("DeliveryServiceApi.Data.Models.Brand", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Goods");
                });

            modelBuilder.Entity("DeliveryServiceApi.Data.Models.CategoryType", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Goods");
                });

            modelBuilder.Entity("DeliveryServiceApi.Data.Models.Subcategory", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("DeliveryServiceData.Data.Models.Category", b =>
                {
                    b.Navigation("Goods");

                    b.Navigation("Subcategorys");
                });

            modelBuilder.Entity("DeliveryServiceData.Data.Models.Good", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("DeliveryServiceData.Data.Models.ProductType", b =>
                {
                    b.Navigation("CategoriesType");
                });
#pragma warning restore 612, 618
        }
    }
}
